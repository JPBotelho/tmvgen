// BACKGROUND:

left aligned:
ffmpeg -loop 1 -framerate 1 -i bg.jpg -loop 1 -framerate 1 -i cover.jpg  -f concat -safe 0 -i rem.txt -filter_complex "[0:v][1:v]overlay=(W-w)/7:(H-h)/2[out]" -map [out]:v -c:v libx264 -map 2:a -c:a copy -shortest output.mp4

right aligned:
ffmpeg -y -loop 1 -framerate 1 -i bg.jpg -loop 1 -framerate 1 -i cover.jpg  -f concat -safe 0 -i rem.txt -filter_complex "[0:v]scale=1920:1080[bg];[1:v]scale=800:800[cover];[bg][cover]overlay=(W-w)*6/7:(H-h)/2[out]" -map [out]:v -c:v libx264 -map 2:a -c:a copy -shortest output.mp4

centered:
ffmpeg -y -loop 1 -framerate 1 -i bg.jpg -loop 1 -framerate 1 -i cover.jpg  -f concat -safe 0 -i rem.txt -filter_complex "[0:v]scale=1920:1080[bg];[1:v]scale=800:800[cover];[bg][cover]overlay=(W-w)/2:(H-h)/2[out]" -map [out]:v -c:v libx264 -map 2:a -c:a copy -shortest output.mp4

centered with text:
ffmpeg -y -loop 1 -framerate 1 -i bg.jpg -loop 1 -framerate 1 -i cover.jpg  -f concat -safe 0 -i rem.txt -filter_complex "[0:v]scale=1920:1080[bg];[bg]drawtext="fontsize=55:fontfile=f.ttf:text='ALBUM TITLE':x=W/2-text_w/2:y=4*H/5"[bg1];[1:v]scale=700:700[cover];[bg1][cover]overlay=(W-w)/2:(H-h)/4[out]" -map [out]:v -c:v libx264 -map 2:a -c:a copy -shortest output.mp4



// MULTIPLE VIDEOS WITH REENCODE:

ffmpeg -loop 1 -framerate 1 
-i "folder.jpg" 
-i  "first.mp3"  
-i "second.mp3" 
-filter_complex 
"[0:v]scale=600:-1[vid];
[1:a][2:a]concat=n=2:v=0:a=1[final]" 
-map [vid]:v 
-map [final]:a 
-t 378 
-r 1 
-movflags +faststart 
"output.mp4"

// MULTIPLE VIDEOS WITHOUT REENCODE:
ffmpeg 
-i folder.jpg 
-f concat -i rem.txt 
-c:v libx264  
-c:a copy output.mp4


// SINGLE VIDEO:

ffmpeg 
-i "first.mp3" 
-filter_complex 
"[0:v]scale=-1:-1[vid]" 
-map [vid]:v 
-map 0:a 
-t 378 
-r 1 // maybe can be removed?
-movflags +faststart 
"output.mp4"

// SINGLE VIDEO ALTERNATIVE ???
ffmpeg -i first.mp3 -f concat -i list.txt -c:v libx264 -c:a copy -t 60 -r 24 output.mp4

Mirror directory structure instead of outputting to same folder


Recursive: Launch it in a directory and it will run itself in subdirectories

Encoding options:
Use album cover as background image (keep original size or rescale)
No text

Don't reencode audio streams (different concat filter)


Settings:

Recursive: Yes/No (-recursive)
Maximum instances (-maxInstances N) (default 8)

Width (-w xxxx)
Height (-h yyyy)

or

-keepsize

Don't generate individual videos -nosingle
Generate folder videos -gendir

Reencode(-reencode)

Output to directory (-output dir/)

Youtube option, frame looping (-lf)
No background, just cover art (-nobg)

------------------------------------------------------------------------------

Run program
Add current directory to DIRECTORIES TO PROCESS
LOOK FOR JOBS

PROCESS DIRECTORY:
 -> IF DIRECTORY HAS AUDIO FILES 
    -> Create jobs for files (unless -nosingle)
    -> Create job for folder (unless -gendir)
 -> Add subdirectories to DIRECTORIES TO PROCESS

while ActiveJobs < maximum Instances:

TRYWORK:
IF JOB QUEUE NON EMPTY:
 -> Start job from queue
IF JOB QUEUE EMPTY:
 -> IF NOT RECURSIVE -> EXIT
 -> IF RECURSIVE -> PROCESS DIRECTORIES

ON JOB-END CALLBACK: (python futures)
GOTO TRYWORK

LOOK FOR IMAGE IN FOLDER, IF NONE FOUND:
LOOK FOR IMAGE IN EXTRACTED CACHE, IF NONE FOUND:
TRY TO EXTRACT IMAGE FROM MP3 


ffmpeg -loop 1 -framerate 1 -i "folder.jpg" -i  "first.mp3"  -i "second.mp3" -filter_complex "[0:v]scale=600:-1[vid];[1:a][2:a]concat=n=2:v=0:a=1[final]" -map "[final]" -map "[vid]" -t 378 -r 1 -movflags +faststart "output3.mp4"

WORKING FOLDER NO REENCODE:
ffmpeg -i folder.jpg -f concat -i rem.txt -c:v libx264  -c:a copy output.mp4

REENCODE FORCE BIRATE:
ffmpeg -loop 1 -framerate 1 -i "folder.jpg" -i  "first.mp3"  -i "second.mp3" -filter_complex "[1:a][2:a]concat=n=2:v=0:a=1[final];[0:v]scale=600:-1[vid]" -map "[final]" -map "[vid]" -b:a 800k -t 378 -r 1 -movflags +faststart "output3.mp4"

-y automatically overwrites
-n never overwrites


//this seems to work for single:

 ffmpeg -i test.mp3 -an -vcodec copy cover.jpg;ffmpeg -loop 1 -framerate 1 -i "cover.jpg" -i "test.mp3" -map 0:v -map 1:a -b:a 320k -shortest -r 1 -movflags +faststart "output.mp4"

// works for single and youtube: 
ffmpeg -i "second.mp3" -filter_complex "[0:v]scale=-1:-1[vid];[vid]loop=loop=-1:size=1:start=0[vid2]" -map [vid2]:v -map 0:a -b:a 320k -shortest -r 1 -movflags +faststart "output.mp4"

ffmpeg -loop 1 -framerate 1 -i "folder.jpg" -i  "first.mp3" -i "second.mp3" -filter_complex "[0:v]scale=600:-1[vid]; [1:a][2:a]concat=n=2:v=0:a=1[final]" -map [vid]:v -map [final]:a -t 378 -r 1 -movflags +faststart "output.mp4"